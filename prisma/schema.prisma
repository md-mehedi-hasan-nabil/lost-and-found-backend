generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  ADMIN
  USER
}

enum ItemStatus {
  LOST
  FOUND
  CLAIMED
}

enum ItemType {
  LOST
  FOUND
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  profile   Profile?
  items     Item[]
  claims    Claim[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("profiles")
}

model Contact {
  id     String  @id @default(uuid())
  email  String
  phone  String
  itemId String?
  item   Item?

  @@map("contacts")
}

model ItemCategory {
  id        String   @id @default(uuid())
  name      String
  items     Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("item_category")
}

model Item {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  categoryId  String
  category    ItemCategory @relation(fields: [categoryId], references: [id])
  name        String
  description String
  location    String
  date        DateTime // Used for both lost and found dates
  time        DateTime // Used for both lost and found dates
  itemType    ItemType // Differentiates between lost and found items
  status      ItemStatus   @default(LOST)
  contactId   String?      @unique
  contact     Contact?     @relation(fields: [contactId], references: [id])
  image_url   String?
  claims      Claim[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("items")
}

model Claim {
  id                     String      @id @default(uuid())
  userId                 String
  user                   User        @relation(fields: [userId], references: [id])
  itemId                 String
  item                   Item        @relation(fields: [itemId], references: [id])
  status                 ClaimStatus @default(PENDING)
  distinguishingFeatures String
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  @@map("claims")
}
